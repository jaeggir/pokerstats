package ch.rogerjaeggi.pokerstats.web.security;

import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;

import java.io.IOException;

/**
 * Extends
 * {@link org.springframework.http.converter.json.MappingJackson2HttpMessageConverter}
 * to add angularJS prefix for JSON Vulnerability. <br />
 * See http://docs.angularjs.org/api/ng.$http section 'JSON Vulnerability
 * Protection'.
 */
public class JsonVulnerabilityProtectionConverter extends MappingJackson2HttpMessageConverter {

    /**
     * Value added to JSON Result, used for JSON Vulnerability protection in
     * angularJS.
     */
    public static final String JSON_PREFIX = ")]}',\n";


    @Override
    protected void writeInternal(Object object, HttpOutputMessage outputMessage)
            throws IOException, HttpMessageNotWritableException {

        JsonEncoding encoding = getJsonEncoding(outputMessage.getHeaders().getContentType());

        try {
            JsonGenerator jsonGen = getObjectMapper().getFactory().createGenerator(outputMessage.getBody(), encoding);
            jsonGen.writeRaw(JSON_PREFIX);
            getObjectMapper().writeValue(jsonGen, object);
        } catch (IOException ex) {
            throw new HttpMessageNotWritableException("Could not write JSON: " + ex.getMessage(), ex);
        }
    }

}